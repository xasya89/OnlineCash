@using System.Text.Json;
@model OnlineCash.DataBaseModels.Arrival
<div class="row mt-2">
    <div class="col">
        @if (Model.isSuccess == false)
        {
            if ((int)ViewData["ShopId"] == -1 || (string)ViewData["Action"] == "Edit")
            {
                <button onclick="arrivalSave(true)" class="btn btn-sm btn-success" style="margin-right: 20px">Сохранить и провести</button>
            }
            <button onclick="arrivalSave(false)" class="btn btn-sm btn-primary" style="margin-right: 20px">Сохранить</button>
        }
        <a asp-action="Index" class="btn btn-sm btn-danger">Отмена</a>
    </div>
</div>

<div class="row mt-2">
    <label for="ShopSelect" class="col-sm-2 col-form-label">Магазин: </label>
    <div class="col-sm-10">
        <select id="ShopSelect" asp-for="@Model.ShopId" asp-items="@(new SelectList(ViewBag.Shops, "Id", "Name"))" class="form-select form-select-sm"></select>
    </div>
</div>
<div class="row mb-2">
    <label for="Num" class="col-sm-2 col-form-label ">Номер</label>
    <div class="col-sm-4">
        <input id="TTNNum" value="@Model.Num" class="form-control form-control-sm " />
    </div>
    <label for="Date" class="col-sm-2">Дата</label>
    <div class="col-sm-4">
        <input id="TTNDate" value="@Model.DateArrival.ToString("yyyy-MM-dd")" type="date" class="form-control form-control-sm " />
    </div>
</div>
<div class="row mb-2">
    <label for="SupplierSelect" class="col-sm-2 col-form-label">Поставщик: </label>
    <div class="col-sm-2">
        <button data-bs-toggle="modal" data-bs-target="#SupplierModal" class="btn btn-primary btn-sm">Выбрать</button>
        <label id="SupplierSelected" data-id="@Model.SupplierId" class="form-label" style="margin-left: 20px">@Model.Supplier?.Name</label>
    </div>
    <label class="col-sm-8 col-form-label col-form-label-sm"></label>
</div>
<div class="row mb-2">
    <label class="col-sm-2 col-form-label ">К оплате: </label>
    <div class="col-auto">
        <span id="sumPaymentAll">@Model.SumArrival</span>
    </div>
</div>
<div class="row mb-2">
    <label class="col-sm-2 col-form-label ">Оплачено: </label>
    <div class="col-auto">
        <span>
            @if (Model.ArrivalPayments != null)
            {
                <span style="margin-right: 5px;">@Model.SumPayments : </span>
                foreach (var payment in Model.ArrivalPayments)
                {
                    <span> @payment.Sum от @payment.DatePayment.ToString("dd.MM") , </span>
                }
            }
        </span>
    </div>
</div>
<hr />
<div class="row">
    <div class="col-auto">
        <span id="btnGoodSelected" class="btn btn-sm btn-secondary m-1">Открыть подбор</span>
    </div>
    <div class="col-sm-6">
        <div class="input-group input-group-sm mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text">Товар</span>
            </div>
            <input id="GoodSearch" type="text" list="GoodSearchList" class="form-control" aria-label="Small" aria-describedby="inputGroup-sizing-sm">
            <datalist id="GoodSearchList"></datalist>
            <div class="input-group-append">
                <span id="GoodSearchBtnAdd" class="input-group-text">Добавить</span>
            </div>
        </div>
    </div>
</div>

<div class="table-responsive">
    <table class="table table-sm table-hover table-bordered">
        <thead class="bg-light">
            <tr>
                <th></th>
                <th>Товар</th>
                <th>Ед</th>
                <th>Цена</th>
                <th>Цена продажи</th>
                <th>Наценка %</th>
                <th>Кол-во</th>
                <th>% НДС</th>
                <th>НДС</th>
                <th>Закупка</th>
                <th>Продажа</th>
                <th>Срок годности</th>
            </tr>
        </thead>
        <tbody id="ArrivalTable">
            @{ var ndsList = new List<string>() { "Без ндс", "20%", "10%", "0%" }; }
            @if (Model.ArrivalGoods != null)
                @foreach (var arrivalGood in Model.ArrivalGoods)
                {
                    decimal sellpercent = 0;
                    if (arrivalGood.Price != 0)
                        sellpercent = Math.Round((arrivalGood.PriceSell / arrivalGood.Price - 1) * 100);
                    decimal sum = arrivalGood.Price * arrivalGood.Count;
                    <tr data-id="@arrivalGood.Id" data-id-good="@arrivalGood.GoodId">
                        <td><span onclick="deleteGood(this.parentElement.parentElement)" class="fa fa-trash"></span></td>
                        <td>@arrivalGood.Good?.Name</td>
                        <td>@arrivalGood.Good?.Unit.GetDescription()</td>
                        <td><input oninput="editGood(this.parentElement.parentElement)" Price value="@arrivalGood.Price" class="form-control form-control-sm " /></td>
                        <td><input oninput="editGood(this.parentElement.parentElement)" PriceSell value="@arrivalGood.PriceSell" class="form-control form-control-sm " /></td>
                        <td><input oninput="editGood(this.parentElement.parentElement)" SellPercent value="@sellpercent" class="form-control form-control-sm " /></td>
                        <td><input oninput="editGood(this.parentElement.parentElement)" Count value="@arrivalGood.Count" class="form-control form-control-sm " /></td>
                        <td>
                            <select Nds asp-items="new SelectList(ndsList)" asp-for="@arrivalGood.Nds" onchange="editGood(this.parentElement.parentElement)" class="form-select form-select-sm">
                            </select>
                        </td>
                        <td>
                            <input SumNds value="@arrivalGood.SumNds" class="form-control form-control-sm" readonly />
                        </td>
                        <td><input Sum value="@arrivalGood.Sum" class="form-control form-control-sm " readonly /></td>
                        <td>
                            <input SumSell value="@arrivalGood.SumSell" class="form-control form-control-sm" readonly />
                        </td>
                        <td>
                            <input ExpiresDate type="date" value="@arrivalGood.ExpiresDate?.ToString("yyyy-MM-dd")" class="form-control form-control-sm" />
                        </td>
                    </tr>
                }
        </tbody>
        <tfoot class="bg-light">
            <tr>
                <th colspan="8"></th>
                <th id="ArrivalTableSummarySumNds">@Model.SumNds</th>
                <th id="ArrivalTableSummarySumArrival">@Model.SumArrival</th>
                <th id="ArrivalTableSummarySumSell">@Model.SumSell</th>
            </tr>
        </tfoot>
    </table>
</div>



<div class="modal fade" id="SupplierModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Поставщик</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" style="max-height: calc(100vh - 170px)">
                <a class="btn btn-primary btn-sm mb-2" data-bs-toggle="collapse" href="#collapseExample" role="button" aria-expanded="false" aria-controls="collapseExample">
                    Новый поставщик
                </a>
                <div class="collapse mb-2" id="collapseExample">
                    <div class="card card-body">
                        <div class="row">
                            <label class="col-sm-2 col-form-label col-form-label-sm">Наименоваени</label>
                            <div class="col-sm-10">
                                <input id="SupplierNewName" class="form-control form-control-sm" />
                            </div>
                        </div>
                        <div class="row">
                            <label class="col-sm-2 col-form-label col-form-label-sm">ИНН</label>
                            <div class="col-sm-10">
                                <input id="SupplierNewINN" class="form-control form-control-sm" />
                            </div>
                        </div>
                        <div class="row">
                            <label class="col-sm-2 col-form-label col-form-label-sm">КПП</label>
                            <div class="col-sm-10">
                                <input id="SupplierNewKPP" class="form-control form-control-sm" />
                            </div>
                        </div>
                        <div class="row">
                            <button id="SupplierNewBtnAdd" class="btn btn-light">Создать</button>
                        </div>
                    </div>
                </div>
                <div class="row mb-2">
                    <div class="col">
                        <input id="SupplierFind" type="text" placeholder="Поиск" class="form-control form-control-sm " />
                    </div>
                </div>
                <div class="row mb-2">
                    <div class="col" style="overflow: hidden">
                        <select id="SupplierList" class="form-select" size="10" style="height:auto; display: inline-block;" aria-label="multiple select example">
                            @foreach (var supplier in (List<OnlineCash.DataBaseModels.Supplier>)ViewBag.Suppliers)
                            {
                                <option value="@supplier.Id" data-name="@supplier.Name">@supplier.Name</option>
                            }
                        </select>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button id="SupplierModalBtnSave" type="button" class="btn btn-primary">Выбрать</button>
            </div>
        </div>
    </div>
</div>

<script>
    const ttnNum = document.getElementById("TTNNum");
    const ttnDate = document.getElementById("TTNDate");

    var goods = new Array();
    const btnGoodSelected = document.getElementById("btnGoodSelected");
    const goodSearch = document.getElementById("GoodSearch");
    const goodSearchBtnAdd = document.getElementById("GoodSearchBtnAdd");
    const goodSearchList = document.getElementById("GoodSearchList");
    const arrivalTable = document.getElementById("ArrivalTable");
    const arrivalTableSummarySumArrival = document.getElementById("ArrivalTableSummarySumArrival");
    const arrivalTableSummarySumNds = document.getElementById("ArrivalTableSummarySumNds");
    const arrivalTableSummarySumSell = document.getElementById("ArrivalTableSummarySumSell");

    const spanSumPaymentAll = document.getElementById("sumPaymentAll");
    const spanPayments = document.getElementById("payments");
    const spanSumPaymentRemain = document.getElementById("sumPaymentRemain");
    //Подбор товара
    let selectionGood = new SelectionGood();
    btnGoodSelected.addEventListener("click", () => selectionGood.OpenDialog());
    selectionGood.CloseDialogSetEvent((idGoods) => {
        idGoods.forEach(idGood => {
            goodAdd(goods.filter(good => good.id == idGood)[0]);
        })
    });
    //Выбор товара из списка
    goodSearchBtnAdd.addEventListener("click", () => {
        addGoodBySearch();
    })
    goodSearch.addEventListener("keyup", (e) => {
        if (e.key === 'Enter' || e.keyCode === 13)
            addGoodBySearch();
    })
    function addGoodBySearch() {
        goods.forEach(g => {
            if (g.name == goodSearch.value)
                goodAdd(g);
        })
        goodSearch.value = "";
    }
    function goodAdd(good) {
        let g = good;
        let tr = document.createElement("tr");
        tr.dataset.id = -1;
        tr.dataset.idGood = g.id;
        let priceSell = 0;
        g.goodPrices.forEach(price => {
            if (price.shopId == shopselect.value)
                priceSell = price.price;
        });
        tr.innerHTML = `
<td><span onclick="deleteGood(this.parentElement.parentElement)" Remove class="fa fa-trash" aria-hidden="true"></span></td>
<td>${g.name}</td>
<td>${g.unit}</td >
<td><input oninput="editGood(this.parentElement.parentElement)" Price value="" class="form-control form-control-sm " /></td>
<td><input oninput="editGood(this.parentElement.parentElement)" PriceSell value="${priceSell}" class="form-control form-control-sm " /></td>
<td><input oninput="editGood(this.parentElement.parentElement)" SellPercent value="" class="form-control form-control-sm " /></td>
<td><input oninput="editGood(this.parentElement.parentElement)" Count value="" class="form-control form-control-sm " /></td>
<td>
    <select Nds onchange="editGood(this.parentElement.parentElement)" class="form-select form-select-sm">
        <option value="Без ндс">Без ндс</option>
        <option value="20%">20%</option>
        <option value="10%">10%</option>
        <option value="0%">0%</option>
    </select>
</td>
<td>
        <input SumNds value="0" class="form-control form-control-sm" readonly />
</td>
<td><input Sum value="0" class="form-control form-control-sm " readonly /></td>
<td><input SumSell value="0" class="form-control form-control-sm" readonly /></td>
<td><input ExpiresDate type="date" value="" class="form-control form-control-sm" /></td>
`;
        arrivalTable.prepend(tr);

        calcSummary();
    }
    function editGood(tr) {

        let tdPrice = tr.querySelector("input[Price]");
        let tdPriceSell = tr.querySelector("input[PriceSell]");
        let tdSellPercent = tr.querySelector("input[SellPercent]");
        let tdCount = tr.querySelector("input[Count]");
        let tdNds = tr.querySelector("select[Nds]");
        let tdSumNds = tr.querySelector("input[SumNds]");
        let tdSum = tr.querySelector("input[Sum]");
        let tdSumSell = tr.querySelector("input[SumSell]");
        let tdExpiresDate = tr.querySelector("input[ExpiresDate]");
        tdPrice.value = tdPrice.value.replace(",", ".");
        tdPriceSell.value = tdPriceSell.value.replace(",", ".");
        tdCount.value = tdCount.value.replace(",", ".");

        let price = parseFloat(tdPrice.value);
        let priceSell = parseFloat(tdPriceSell.value);
        tdSellPercent.value = Math.round((priceSell / price - 1) * 100);
        let count = parseFloat(tdCount.value);
        if (isNaN(price) || isNaN(count)) {
            tdSum.value = "0";
            tdSumNds.value = "0";
        }
        else {
            let sum = price * count;
            switch (tdNds.value) {
                case "20%":
                    tdSum.value = (sum + sum * 0.2).toFixed(2);
                    tdSumNds.value = (sum * 0.2).toFixed(2);
                    break;
                case "10%":
                    tdSum.value = (sum + sum * 0.1).toFixed(2);
                    tdSumNds.value = (sum * 0.1).toFixed(2);
                    break;
                default:
                    tdSum.value = sum.toFixed(2);
                    tdSumNds.value = "0";
                    break;
            }
        }
        if (isNaN(priceSell) || isNaN(count))
            tdSumSell.value = "0";
        else
            tdSumSell.value = (priceSell * count).toFixed(2);

        calcSummary();
    }
    function fractional_multiplication(a, b) {
        var arr = [];
        function sum(x) { var s = 0; for (i = 0; i < x.length; i++) { s += x[i] } return s };
        if (Number.isInteger(a) == true) { arr.length = a; arr.fill(b); return sum(arr) }
        else { arr.length = b; arr.fill(a); return sum(arr) }
    }
    function deleteGood(tr) {
        if (confirm("Удалить?"))
            tr.remove();
    }
    function calcSummary() {
        let sumAll = 0;
        let sumNdsAll = 0;
        let sumSellAll = 0;
        arrivalTable.querySelectorAll("tr").forEach(tr => {
            console.log(tr);
            let sum = parseFloat(tr.querySelector("input[Sum]").value);
            let sumNds = parseFloat(tr.querySelector("input[SumNds]").value);
            let sumSell = parseFloat(tr.querySelector("input[SumSell]").value);
            sumAll += isNaN(sum) ? 0 : sum;
            sumNdsAll += isNaN(sumNds) ? 0 : sumNds;
            sumSellAll += isNaN(sumSell) ? 0 : sumSell;
        });
        arrivalTableSummarySumNds.textContent = sumNdsAll.toFixed(2);
        arrivalTableSummarySumArrival.textContent = sumAll.toFixed(2);
        arrivalTableSummarySumSell.textContent = sumSellAll.toFixed(2);
        spanSumPaymentAll.textContent = sumAll.toFixed(2);
    }
    const shopselect = document.getElementById("ShopSelect");
    shopselect.addEventListener("change", () => {
        //Пересчитаем цену продажи и наценку
        if (confirm("Магазин изменился, выполнить пересчет цену продажи?")) {
            arrivalTable.querySelectorAll("tr").forEach(tr => {
                let idGood = tr.dataset.idGood;
                let price = 0;
                goods.forEach(good => {
                    good.goodPrices.forEach(goodPrice => {
                        if (goodPrice.shopId == shopselect.value)
                            price = goodPrice.price
                    });
                });
                tr.querySelector("input[PriceSell]").value = price;
                editGood(idGood);
            })
        }
    })
    const supplierSelected = document.getElementById("SupplierSelected");
    const supplierModalBtnSave = document.getElementById("SupplierModalBtnSave");
    document.addEventListener("DOMContentLoaded", function (event) {
        fetch("/api/goods")
            .then(r => r.json())
            .then(goodlist => {
                goods = goodlist;
                goodlist.forEach(g => {
                    let option = document.createElement("option");
                    option.value=g.name;
                    goodSearchList.appendChild(option);
                })
            });

        fetch("/api/suppliers")
            .then(r => r.json())
            .then(suppliers => {
                var suppliers = suppliers;
            });

        var supplierModal = new bootstrap.Modal(document.getElementById('SupplierModal'));
        supplierModalBtnSave.addEventListener("click", () => {
            let supplierid = supplierList.value;
            let suppliername = "";
            fetch("/api/suppliers")
                .then(r => r.json())
                .then(suppliers => {
                    suppliers.forEach(s => {
                        if (s.id == supplierid)
                            suppliername = s.name;
                    });
                    supplierSelected.textContent = suppliername;
                    supplierSelected.dataset.id = supplierid;
                    supplierModal.hide();
                });
        })
    });
    const supplierNewName = document.getElementById("SupplierNewName");
    const supplierNewInn = document.getElementById("SupplierNewINN");
    const supplierNewKpp = document.getElementById("SupplierNewKPP");
    const supplierNewBtnAdd = document.getElementById("SupplierNewBtnAdd");
    supplierNewBtnAdd.addEventListener("click", () => {
        let name = supplierNewName.value;
        let inn = supplierNewInn.value;
        let kpp = supplierNewKpp.value;
        fetch("/api/suppliers", {
            method: "POST",
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ name: name, inn: inn, kpp:kpp })
        })
            .then(r => r.json())
            .then(supplier => {
                let option = document.createElement("option");
                option.value = supplier.id;
                option.textContent = supplier.name;
                option.dataset.name = supplier.name;
                supplierList.append(option);
                option.selected = true;
            })
    })

    const supplierFind = document.getElementById("SupplierFind");
    const supplierList = document.getElementById("SupplierList");
    supplierFind.addEventListener("input", () => {
        let find = supplierFind.value;
        let flagfirst = true;
        supplierList.querySelectorAll("option").forEach(option => {
            if (option.dataset.name.indexOf(find) == -1) {
                option.style.display = "none";
                if (flagfirst) {
                    option.selected = true;
                    flagfirst = false;
                }
            }
            else
                option.style.display = "block";
        })
    })

    function arrivalSave(isSuccess) {
        let num = ttnNum.value;
        let date = ttnDate.value;
        let shopId = shopselect.value;
        let supplierId = supplierSelected.dataset.id;
        let arrivalGoods = new Array();
        arrivalTable.querySelectorAll("tr").forEach(tr => {
            arrivalGoods.push({
                id: parseInt(tr.dataset.id),
                goodId: toInteger(tr.dataset.idGood),
                count: parseFloat(tr.querySelector("input[Count]").value.replace(",",".")),
                price: parseFloat(tr.querySelector("input[Price]").value.replace(",", ".")),
                priceSell: parseFloat(tr.querySelector("input[PriceSell]").value.replace(",", ".")),
                nds: tr.querySelector("select[Nds]").value,
                expiresDate: tr.querySelector("input[ExpiresDate]").value == "" ? null : tr.querySelector("input[ExpiresDate]").value
            });
        });
        fetch("create", {
            method: "POST",
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                id: @Model.Id,
                shopId: parseInt(shopId),
                supplierId: parseInt(supplierId),
                num: num,
                dateArrival: date,
                isSuccess: isSuccess,
                arrivalGoods: arrivalGoods
            })
        })
            .then(r => {
                if (r.status == 200)
                    window.location.href = "index";
            });
    }
</script>