// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineCash;

namespace OnlineCash.Migrations
{
    [DbContext(typeof(shopContext))]
    [Migration("20211203114401_Alter_DiscountCard")]
    partial class Alter_DiscountCard
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasCharSet("utf8")
                .UseCollation("utf8_general_ci")
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("OnlineCash.DataBaseModels.Arrival", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("CountAll")
                        .HasColumnType("double");

                    b.Property<DateTime>("DateArrival")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Num")
                        .HasColumnType("longtext");

                    b.Property<decimal>("PriceAll")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<decimal>("SumArrivals")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("SumPayments")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<bool>("isSuccess")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Arrivals");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.ArrivalGood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ArrivalId")
                        .HasColumnType("int");

                    b.Property<double>("Count")
                        .HasColumnType("double");

                    b.Property<int>("GoodId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PriceSell")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("ArrivalId");

                    b.HasIndex("GoodId");

                    b.ToTable("ArrivalGoods");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.ArrivalPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ArrivalId")
                        .HasColumnType("int");

                    b.Property<int>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatePayment")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Sum")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("ArrivalId");

                    b.HasIndex("BankAccountId");

                    b.ToTable("ArrivalPayments");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BankName")
                        .HasColumnType("longtext");

                    b.Property<string>("Bik")
                        .HasColumnType("longtext");

                    b.Property<string>("KorShet")
                        .HasColumnType("longtext");

                    b.Property<string>("Num")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.BarCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<int>("GoodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GoodId");

                    b.ToTable("BarCodes");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.Cashier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Inn")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("PinCode")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Cashiers");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.CheckGood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CheckSellId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<double>("Count")
                        .HasColumnType("double");

                    b.Property<int>("GoodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CheckSellId");

                    b.HasIndex("GoodId");

                    b.ToTable("CheckGoods");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.CheckSell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsElectron")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ShiftId")
                        .HasColumnType("int");

                    b.Property<decimal>("Sum")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("SumAll")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("SumDiscont")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("ShiftId");

                    b.ToTable("CheckSells");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.DiscountCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Num")
                        .HasColumnType("longtext");

                    b.Property<bool>("isFree")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("DiscountCards");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.Good", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Article")
                        .HasColumnType("longtext");

                    b.Property<string>("BarCode")
                        .HasColumnType("longtext");

                    b.Property<int>("GoodGroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("SpecialType")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("char(36)");

                    b.Property<double?>("VPackage")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("GoodGroupId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Goods");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.GoodAdded", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("GoodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GoodId");

                    b.ToTable("GoodAddeds");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.GoodBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Count")
                        .HasColumnType("double");

                    b.Property<int>("GoodId")
                        .HasColumnType("int");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GoodId");

                    b.HasIndex("ShopId");

                    b.ToTable("GoodBalances");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.GoodBalanceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("CountLast")
                        .HasColumnType("double");

                    b.Property<DateTime>("CurDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("GoodId")
                        .HasColumnType("int");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GoodId");

                    b.HasIndex("ShopId");

                    b.ToTable("GoodBalanceHistories");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.GoodGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("GoodGroups");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.GoodPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("BuySuccess")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("GoodId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GoodId");

                    b.HasIndex("ShopId");

                    b.ToTable("GoodPrices");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.MoveDoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ConsigneeShopId")
                        .HasColumnType("int");

                    b.Property<int>("ConsignerShopId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateMove")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("SumAllConsignee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("SumAllConsigner")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("ConsigneeShopId");

                    b.HasIndex("ConsignerShopId");

                    b.ToTable("MoveDocs");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.MoveGood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Count")
                        .HasColumnType("double");

                    b.Property<int>("GoodId")
                        .HasColumnType("int");

                    b.Property<int>("MoveDocId")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceConsignee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PriceConsigner")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("GoodId");

                    b.HasIndex("MoveDocId");

                    b.ToTable("MoveGoods");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CashierId")
                        .HasColumnType("int");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Stop")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("SumAll")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("SumCreditDelivery")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("SumCreditRepayment")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("SumElectron")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("SumIncome")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("SumNoElectron")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("SumOutcome")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("SumSell")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("SummReturn")
                        .HasColumnType("decimal(65,30)");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CashierId");

                    b.HasIndex("ShopId");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.ShiftSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Count")
                        .HasColumnType("double");

                    b.Property<int>("GoodId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ShiftId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GoodId");

                    b.HasIndex("ShiftId");

                    b.ToTable("ShiftSales");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.Shop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Adress")
                        .HasColumnType("longtext");

                    b.Property<string>("Inn")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("OrgName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.StockTakingGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("StocktakingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StocktakingId");

                    b.ToTable("StockTakingGroups");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.Stocktaking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("CountDb")
                        .HasColumnType("double");

                    b.Property<double>("CountFact")
                        .HasColumnType("double");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Num")
                        .HasColumnType("int");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("SumDb")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("SumFact")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("isSuccess")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("Stocktakings");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.StocktakingGood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Count")
                        .HasColumnType("double");

                    b.Property<double>("CountDB")
                        .HasColumnType("double");

                    b.Property<double>("CountFact")
                        .HasColumnType("double");

                    b.Property<int>("GoodId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("StockTakingGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GoodId");

                    b.HasIndex("StockTakingGroupId");

                    b.ToTable("StocktakingGoods");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.SumBalanceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("ArrivalSum")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("CashIncomeSum")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("CashOutcomeSum")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("CashReturnSum")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("CashSalesSum")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("DateHistory")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("EndDaySum")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("MoveSum")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<decimal>("StartDaySum")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("StocktakingSum")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("WriteofSum")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("SumBalanceHistories");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Inn")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.Writeof", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateWriteof")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("SumAll")
                        .HasColumnType("decimal(65,30)");

                    b.Property<Guid?>("Uuid")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("Writeofs");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.WriteofGood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Count")
                        .HasColumnType("double");

                    b.Property<int>("GoodId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("WriteofId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GoodId");

                    b.HasIndex("WriteofId");

                    b.ToTable("WriteofGoods");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.Arrival", b =>
                {
                    b.HasOne("OnlineCash.DataBaseModels.Shop", "Shop")
                        .WithMany("Arrivals")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineCash.DataBaseModels.Supplier", "Supplier")
                        .WithMany("Arrivals")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.ArrivalGood", b =>
                {
                    b.HasOne("OnlineCash.DataBaseModels.Arrival", "Arrival")
                        .WithMany("ArrivalGoods")
                        .HasForeignKey("ArrivalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineCash.DataBaseModels.Good", "Good")
                        .WithMany("ArrivalGoods")
                        .HasForeignKey("GoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arrival");

                    b.Navigation("Good");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.ArrivalPayment", b =>
                {
                    b.HasOne("OnlineCash.DataBaseModels.Arrival", "Arrival")
                        .WithMany("ArrivalPayments")
                        .HasForeignKey("ArrivalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineCash.DataBaseModels.BankAccount", "BankAccount")
                        .WithMany("ArrivalPayments")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arrival");

                    b.Navigation("BankAccount");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.BarCode", b =>
                {
                    b.HasOne("OnlineCash.DataBaseModels.Good", "Good")
                        .WithMany("BarCodes")
                        .HasForeignKey("GoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Good");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.CheckGood", b =>
                {
                    b.HasOne("OnlineCash.DataBaseModels.CheckSell", "CheckSell")
                        .WithMany("CheckGoods")
                        .HasForeignKey("CheckSellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineCash.DataBaseModels.Good", "Good")
                        .WithMany("CheckGoods")
                        .HasForeignKey("GoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CheckSell");

                    b.Navigation("Good");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.CheckSell", b =>
                {
                    b.HasOne("OnlineCash.DataBaseModels.Shift", "Shift")
                        .WithMany("CheckSells")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.Good", b =>
                {
                    b.HasOne("OnlineCash.DataBaseModels.GoodGroup", "GoodGroup")
                        .WithMany("Goods")
                        .HasForeignKey("GoodGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineCash.DataBaseModels.Supplier", "Supplier")
                        .WithMany("Goods")
                        .HasForeignKey("SupplierId");

                    b.Navigation("GoodGroup");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.GoodAdded", b =>
                {
                    b.HasOne("OnlineCash.DataBaseModels.Good", "Good")
                        .WithMany("GoodAddeds")
                        .HasForeignKey("GoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Good");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.GoodBalance", b =>
                {
                    b.HasOne("OnlineCash.DataBaseModels.Good", "Good")
                        .WithMany("GoodBalances")
                        .HasForeignKey("GoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineCash.DataBaseModels.Shop", "Shop")
                        .WithMany("GoodBalances")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Good");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.GoodBalanceHistory", b =>
                {
                    b.HasOne("OnlineCash.DataBaseModels.Good", "Good")
                        .WithMany("GoodBalanceHistories")
                        .HasForeignKey("GoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineCash.DataBaseModels.Shop", "Shop")
                        .WithMany("GoodBalanceHistories")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Good");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.GoodPrice", b =>
                {
                    b.HasOne("OnlineCash.DataBaseModels.Good", "Good")
                        .WithMany("GoodPrices")
                        .HasForeignKey("GoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineCash.DataBaseModels.Shop", "Shop")
                        .WithMany("GoodPrices")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Good");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.MoveDoc", b =>
                {
                    b.HasOne("OnlineCash.DataBaseModels.Shop", "ConsigneeShop")
                        .WithMany("MoveConsigneeDocs")
                        .HasForeignKey("ConsigneeShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineCash.DataBaseModels.Shop", "ConsignerShop")
                        .WithMany("MoveConsignerDocs")
                        .HasForeignKey("ConsignerShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConsigneeShop");

                    b.Navigation("ConsignerShop");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.MoveGood", b =>
                {
                    b.HasOne("OnlineCash.DataBaseModels.Good", "Good")
                        .WithMany("MoveGoods")
                        .HasForeignKey("GoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineCash.DataBaseModels.MoveDoc", "MoveDoc")
                        .WithMany("MoveGoods")
                        .HasForeignKey("MoveDocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Good");

                    b.Navigation("MoveDoc");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.Shift", b =>
                {
                    b.HasOne("OnlineCash.DataBaseModels.Cashier", "Cashier")
                        .WithMany("Shifts")
                        .HasForeignKey("CashierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineCash.DataBaseModels.Shop", "Shop")
                        .WithMany("Shifts")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cashier");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.ShiftSale", b =>
                {
                    b.HasOne("OnlineCash.DataBaseModels.Good", "Good")
                        .WithMany("ShiftSales")
                        .HasForeignKey("GoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineCash.DataBaseModels.Shift", "Shift")
                        .WithMany("ShiftSales")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Good");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.StockTakingGroup", b =>
                {
                    b.HasOne("OnlineCash.DataBaseModels.Stocktaking", "Stocktaking")
                        .WithMany("StockTakingGroups")
                        .HasForeignKey("StocktakingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stocktaking");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.Stocktaking", b =>
                {
                    b.HasOne("OnlineCash.DataBaseModels.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.StocktakingGood", b =>
                {
                    b.HasOne("OnlineCash.DataBaseModels.Good", "Good")
                        .WithMany("StocktakingGoods")
                        .HasForeignKey("GoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineCash.DataBaseModels.StockTakingGroup", "StockTakingGroup")
                        .WithMany("StocktakingGoods")
                        .HasForeignKey("StockTakingGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Good");

                    b.Navigation("StockTakingGroup");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.SumBalanceHistory", b =>
                {
                    b.HasOne("OnlineCash.DataBaseModels.Shop", "Shop")
                        .WithMany("SumBalanceHistories")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.Writeof", b =>
                {
                    b.HasOne("OnlineCash.DataBaseModels.Shop", "Shop")
                        .WithMany("Writeofs")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.WriteofGood", b =>
                {
                    b.HasOne("OnlineCash.DataBaseModels.Good", "Good")
                        .WithMany("WriteofGoods")
                        .HasForeignKey("GoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineCash.DataBaseModels.Writeof", "Writeof")
                        .WithMany("WriteofGoods")
                        .HasForeignKey("WriteofId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Good");

                    b.Navigation("Writeof");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.Arrival", b =>
                {
                    b.Navigation("ArrivalGoods");

                    b.Navigation("ArrivalPayments");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.BankAccount", b =>
                {
                    b.Navigation("ArrivalPayments");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.Cashier", b =>
                {
                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.CheckSell", b =>
                {
                    b.Navigation("CheckGoods");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.Good", b =>
                {
                    b.Navigation("ArrivalGoods");

                    b.Navigation("BarCodes");

                    b.Navigation("CheckGoods");

                    b.Navigation("GoodAddeds");

                    b.Navigation("GoodBalanceHistories");

                    b.Navigation("GoodBalances");

                    b.Navigation("GoodPrices");

                    b.Navigation("MoveGoods");

                    b.Navigation("ShiftSales");

                    b.Navigation("StocktakingGoods");

                    b.Navigation("WriteofGoods");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.GoodGroup", b =>
                {
                    b.Navigation("Goods");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.MoveDoc", b =>
                {
                    b.Navigation("MoveGoods");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.Shift", b =>
                {
                    b.Navigation("CheckSells");

                    b.Navigation("ShiftSales");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.Shop", b =>
                {
                    b.Navigation("Arrivals");

                    b.Navigation("GoodBalanceHistories");

                    b.Navigation("GoodBalances");

                    b.Navigation("GoodPrices");

                    b.Navigation("MoveConsigneeDocs");

                    b.Navigation("MoveConsignerDocs");

                    b.Navigation("Shifts");

                    b.Navigation("SumBalanceHistories");

                    b.Navigation("Writeofs");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.StockTakingGroup", b =>
                {
                    b.Navigation("StocktakingGoods");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.Stocktaking", b =>
                {
                    b.Navigation("StockTakingGroups");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.Supplier", b =>
                {
                    b.Navigation("Arrivals");

                    b.Navigation("Goods");
                });

            modelBuilder.Entity("OnlineCash.DataBaseModels.Writeof", b =>
                {
                    b.Navigation("WriteofGoods");
                });
#pragma warning restore 612, 618
        }
    }
}
